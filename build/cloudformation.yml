AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodeBuild project for Cloz Outfit Generation API Lambda deployment'

Parameters:
  ProjectName:
    Type: String
    Default: 'cloz-outfit-generator-build'
    Description: 'Name for the CodeBuild project'
  
  SourceCodeBucket:
    Type: String
    Default: 'cloz-outfit-generator-source'
    Description: 'S3 bucket for source code (will be created if not exists)'
  
  ArtifactsBucket:
    Type: String
    Default: 'cloz-outfit-generator-artifacts'
    Description: 'S3 bucket for build artifacts (will be created if not exists)'
  
  LambdaFunctionName:
    Type: String
    Default: 'ClozRandomLookGenerator'
    Description: 'Name of the Lambda function to update'

Resources:
  # S3 Bucket for source code
  SourceCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceCodeBucket
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # S3 Bucket for build artifacts
  ArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactsBucket
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy:AdministratorAccess
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: LambdaUpdate
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunctionName}'

  # CodeBuild Project
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ProjectName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: S3
        Location: !Ref ArtifactsBucket
        Name: outfit-generator-build
        Packaging: ZIP
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        EnvironmentVariables:
          - Name: LAMBDA_FUNCTION_NAME
            Value: !Ref LambdaFunctionName
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Source:
        Type: S3
        Location: !Sub '${SourceCodeBucket}/source.zip'
        BuildSpec: build/buildspec.yml
      Cache:
        Type: S3
        Location: !Sub '${SourceCodeBucket}/cache'
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub '/aws/codebuild/${ProjectName}'
          StreamName: build-log

  # CloudWatch Log Group
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${ProjectName}'
      RetentionInDays: 30

  # S3 Bucket Policy for source code
  SourceCodeBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SourceCodeBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyUnencryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Sub '${SourceCodeBucket}/*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: AES256

  # S3 Bucket Policy for artifacts
  ArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: DenyUnencryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Sub '${ArtifactsBucket}/*'
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: AES256

Outputs:
  CodeBuildProjectName:
    Description: 'Name of the CodeBuild project'
    Value: !Ref CodeBuildProject
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildProject'
  
  SourceCodeBucketName:
    Description: 'S3 bucket for source code'
    Value: !Ref SourceCodeBucket
    Export:
      Name: !Sub '${AWS::StackName}-SourceCodeBucket'
  
  ArtifactsBucketName:
    Description: 'S3 bucket for build artifacts'
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AWS::StackName}-ArtifactsBucket'
  
  CodeBuildServiceRoleArn:
    Description: 'ARN of the CodeBuild service role'
    Value: !GetAtt CodeBuildServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildServiceRole'
